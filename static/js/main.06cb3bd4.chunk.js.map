{"version":3,"sources":["components/App.jsx","components/Display.jsx","components/Button.jsx","components/TinyButton.jsx","components/Keypad.jsx","index.js"],"names":["App","useState","result","setResult","pointAloud","setPointAloud","onClickPoint","cAdd","tecla","isOperator","test","slice","match","cDel","length","substring","cEval","resultToEvaluate","eval","replaceAll","toString","cSetMemory","localStorage","memoria","cRecover","getItem","char","AppStyled","value","onClickAdd","e","onClickClear","onClickDel","onClickEval","onClickSetMemory","onClickClearMemory","removeItem","onClickRecoverMemory","styled","div","DisplayStyled","Display","ButtonStyled","Button","content","onClickButton","symbols","className","includes","isOperation","onClick","TinyButtonStyled","TinyButton","Keypad","props","array","defineFunction","KeyPadStyled","MemoryStripStyled","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06cb3bd4.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport Display from \"./Display\";\r\nimport { Keypad } from \"./Keypad\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const App = () => {\r\n\t\r\n\t// genero un useState para el display\r\n\tconst [result, setResult] = useState(\"0\");\r\n\r\n/*  junto a la funcion onclickPoint, \r\n\tvalido que no ocurra algo como esto:  32.15.18.186.\r\n\tAl tocar el punto, se setea a false.\r\n\tCuando toco un simbolo, vuelve a true.\r\n\tSi pointAloud es false, en vez de agregar un \".\" agrega \"\"\r\n\t*/\t\t \r\n\tconst [pointAloud, setPointAloud] = useState(true)\r\n\r\n\tconst onClickPoint = () => {\r\n\t\tsetPointAloud(false)\r\n\t\t// para que no borre el 0 cuando pongo un punto como primer caracter\r\n\t\tif (result === \"0\") return setResult(cAdd(\"0.\")) ;\t\t\r\n\t\tsetResult(cAdd(pointAloud ? \".\" : \"\"))\r\n\t}\r\n\r\n\t// *****************************************************\r\n\r\n\t/* \r\n\tAca van las funciones especificas para los botones. \r\n\tLas paso como props al keypad */\r\n\r\n\t/* . Agrega el content del target al toEvaluate (display)\r\n\t Use regexp para que antes de agregar un elemento al resultado, \r\n\tchequee que tenga el formato correspondiente para que no tire error luego el eval.\r\n\tSi no pasa esa prueba, devuelve el mismo que ingreso */\r\n\tconst cAdd = (tecla) => {\r\n\r\n\t\tconst exp = /^(\\d+(\\.)?(\\d)*[x/+-]?)+$/g;\r\n\r\n// al ingresar un operador, puedo volver a ingresar un punto\r\n\t\tif(isOperator(tecla)) {setPointAloud(true)}\r\n\r\n\t\tif (result !== \"0\") {\r\n\t\t\tif (exp.test(result)) {\r\n\t\t\t\t//  si el ultimo char era una operacion y tecla tambien ,reemplazo el ultimo char por tecla\r\n\t\t\t\tif (isOperator(result.slice(-1)) && isOperator(tecla)) {\r\n\t\t\t\t\treturn result.slice(0, -1) + tecla;\r\n\t\t\t\t}\r\n\t\t\t\t// sino, la agrego\r\n\t\t\t\treturn result + tecla;\r\n\t\t\t}\r\n\r\n\t\t\t// si no pasa el test, el resultado no cambia\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// si result era 0 y tecla es diferente a un simbolo, retorna su valor\r\n\t\treturn tecla.match(/[/x+-]/) ? \"0\" : tecla;\r\n\t};\r\n\r\n\t// . borra de a un caracter. Si es el ultimo, retorna 0\r\n\tconst cDel = () => {\r\n\t\treturn result.length > 1\r\n\t\t\t? result.substring(0, result.length - 1)\r\n\t\t\t: setResult(\"0\");\r\n\t};\r\n\r\n\t// . evalua la cuenta.\r\n\tconst cEval = () => {\r\n\t\tsetPointAloud(true);\r\n\t\t// no dejo que se evalue un string con una operacion al final\r\n\t\tconst resultToEvaluate = isOperator(result.slice(-1))\r\n\t\t\t? cDel(result)\r\n\t\t\t: result;\r\n\r\n\t\t// reemplazo la x por el * para que pueda operar\r\n\t\treturn eval(resultToEvaluate.replaceAll(\"x\", \"*\")).toString();\r\n\t};\r\n\r\n\t// . guarda en localStorage el numero si no contiene operaciones\r\n\tconst cSetMemory = () => {\r\n\t\treturn /[-+x/]/g.test(result) ? null : localStorage.memoria = result;\r\n\t};\r\n\r\n\t// . si hay memoria salvada en localStorage, guarda su valor como content de la tecla MR\r\n\tconst cRecover = () => {\r\n\t\tconst memoria = localStorage.getItem('memoria')\r\n\t\treturn memoria ? setResult(cAdd(memoria)) : null;\r\n\t};\r\n\r\n\t// . la uso para evaluar si un char es una operacion\r\n\tconst isOperator = (char) => {\r\n\t\t// return char.match(/[/x+-]/);\r\n\t\treturn /[/x+-]/.test(char);\r\n\t};\r\n\r\n\t// *****************************************************\r\n\t\r\n\treturn (\r\n\t\t<AppStyled>\r\n\t\t\t<Display value={result} />\r\n\t\t\t<Keypad\r\n\t\t\t\tonClickAdd={(e) => setResult(cAdd(e))}\r\n\t\t\t\tonClickClear={() => {setPointAloud(true); setResult(\"0\")}}\r\n\t\t\t\tonClickDel={() => setResult(cDel)}\r\n\t\t\t\tonClickEval={() => setResult(cEval)}\r\n\t\t\t\tonClickSetMemory={() => cSetMemory()}\r\n\t\t\t\tonClickClearMemory={() => localStorage.removeItem('memoria')}\r\n\t\t\t\tonClickRecoverMemory={cRecover}\r\n\t\t\t\tonClickPoint= { ()=> onClickPoint() }\r\n\t\t\t/>\r\n\t\t</AppStyled>\r\n\t);\r\n};\r\n\r\n// ESTILOS\r\n\r\nconst AppStyled = styled.div`\r\n\tmax-width: 20%;\r\n\tmin-width: 300px;\r\n\tbackground-color: #111;\r\n\tcolor: white;\r\n\tborder-radius: 10px;\r\n\tmargin: 2em auto;\r\n`;\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Display = ({ value }) => {\r\n\treturn (\r\n\t\t// uso el slice para que no se me salgan los numeros de la calculadora\r\n\t\t<DisplayStyled>{value.slice(0, 12)}</DisplayStyled>\r\n\t);\r\n};\r\n\r\nconst DisplayStyled = styled.div`\r\n\tfont-size: 2.7em;\r\n\tfont-weight: 300;\r\n\ttext-align: right;\r\n\tpadding-right: 20px;\r\n\tbackground-color: #4f4a4c;\r\n\tpadding: 0.5em 0.2em;\r\n\tborder-radius: 10px 10px 0 0;\r\n`;\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Button = ( { content, onClickButton } ) => {\r\n\tconst symbols = [\"+\", \"-\", \"/\", \"x\", \"=\"];\r\n\r\n\t/*# funciones */\r\n\tconst isOperation = (e) => symbols.includes(e);\r\n\tconst isTall = (e) => [\"+\", \"=\"].includes(e);\r\n\r\n\treturn (\r\n\t\t<ButtonStyled\r\n\t\t\tclassName={`${isTall(content) ? \"tall\" : null}\r\n\t\t\t\t\t\t ${isOperation(content) ? \"painted\" : null}`}\r\n\t\t\tonClick={() => onClickButton(content)}\r\n\t\t>\r\n\t\t\t{content}\r\n\t\t</ButtonStyled>\r\n\t);\r\n};\r\n\r\nconst ButtonStyled = styled.div`\r\n\tfont-size: 1.5em;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tbackground-color: #333;\r\n\t/* width: 100%; */\r\n\tborder-radius: 5px;\r\n\tcursor: pointer;\r\n\tuser-select: none;\r\n\r\n\t&:hover {\r\n\t\topacity: 0.7;\r\n\t}\r\n`;\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nexport const TinyButton = ({ content, onClickButton }) => {\r\n    \r\n\treturn (\r\n\t\t<TinyButtonStyled\r\n\t\t\tonClick={() => onClickButton()}\r\n\t\t>\t\r\n\r\n\t\t\t{content}\r\n\t\t\t\r\n\t\t</TinyButtonStyled>\r\n\t);\r\n};\r\n\r\nconst TinyButtonStyled = styled.div`\r\n\tfont-size: 1em;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tbackground-color: #555555;\r\n    color: orange;\r\n\t/* width: 100%; */\r\n\tborder-radius:50%;\r\n    width:40px;\r\n    height: 40px;\r\n\tcursor: pointer;\r\n\tuser-select: none;\r\n\r\n\t&:hover {\r\n\t\topacity: 0.7;\r\n\t}\r\n`;\r\n\r\nexport default TinyButton;\r\n\r\n","import styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\nimport TinyButton from \"./TinyButton\";\r\n\r\n\r\n// el keypad, recibira las funciones que aplicaran la logica de negocio como props\r\nexport const Keypad = ( props ) => {\r\n\t\r\n// array con caracteres para la funcion que genera la botonera\t\r\n\tconst characters = [\"C\", \"/\", \"x\", \"-\", \"7\", \"8\", \"9\", \"+\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"=\", \"0\", \".\" , \"←\"];\r\n\t\r\n\tconst createKeypad = (array)=> {\r\n\t\treturn (\r\n\t\t\tarray.map((e) => (\r\n\t\t\t\t<Button \r\n\t\t\t\tcontent={e} \r\n\t\t\t\tonClickButton={ defineFunction(e) }\r\n\t\t\t\t/>\r\n\t\t\t))\r\n\t\t)\r\n\t}\r\n\r\n// define segun el valor, que funcion pasa al componente boton\r\n\tconst defineFunction = (e)=> {\r\n\t\tswitch (e) {\r\n\t\t\tcase \"=\":\r\n\t\t\t\treturn props.onClickEval;\r\n\t\t\tcase \"←\":\r\n\t\t\t\treturn props.onClickDel;\r\n\t\t\tcase \"C\":\r\n\t\t\t\treturn props.onClickClear;\r\n\t\t\tcase \".\":\r\n\t\t\t\treturn props.onClickPoint;\r\n\t\t\tdefault:\r\n\t\t\t\treturn props.onClickAdd;\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n/* El Keypad se compone de dos partes:\r\n\t\ttira de botones de memoria\r\n\t\tnumeros y botones de operacion\r\n\t\t*/\r\n\t\t<KeyPadStyled>\r\n\r\n\t\t\t<MemoryStripStyled>\r\n\t\t\t\t<TinyButton content=\"MS\" onClickButton={props.onClickSetMemory} />\r\n\t\t\t\t<TinyButton content=\"MC\" onClickButton={props.onClickClearMemory} />\r\n\t\t\t\t<TinyButton content=\"MR\" onClickButton={props.onClickRecoverMemory} />\r\n\t\t\t</MemoryStripStyled>\r\n\r\n\t\t\t{ createKeypad(characters) }\r\n\r\n\t\t</KeyPadStyled>\r\n\t);\t\r\n};\r\n\r\n\r\n/* Estilos del keypad con styled components para hacer mas modularizable la calculadora.\r\nLa calculadora esta armada con display grid.Facil de plantear y responsive como pocos */\r\nconst KeyPadStyled = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: 40px repeat(5, 80px);\r\n\tgrid-template-columns: repeat(4, 1fr);\r\n\tpadding: 10px;\r\n\tgrid-gap: 10px;\r\n`;\r\n\r\n/* \r\n  Tira donde van los botones de memoria (TinyButton)\r\n  Flexbox nos ayuda a distribuirlos sin estar atados al grid del keypad \r\n */\r\nconst MemoryStripStyled = styled.div`\r\n\tdisplay: flex;\r\n    justify-content: space-around;\r\n\tgrid-column: span 4;\r\n`;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n/* README\r\n---------------------------------\r\n\t\tLa App principal, se compone de estos componentes:\r\n\r\n\t\t\t\t\tApp\r\n\t\t\t\t\t/  \\\r\n\t\t\t\t   /    \\\r\n\t\t\t\t  /      \\\r\n\t\t\tDisplay    Keypad\r\n\t\t\t\t\t   /   \\\r\n\t\t\t\t\t  /\t    \\\r\n\t\t\t\tTinyButton    Button\r\n\r\nPor cuestiones de mejorar la lectura, las constantes con los styled components\r\niran al final de cada componente\r\n*/"],"sourceRoot":""}